
// note: this file expects params.jinc

from Dilithium require "reduce.jinc"

/*************************************************
* Name:        PQCLEAN_DILITHIUM5_CLEAN_poly_reduce
*
* Description: Inplace reduction of all coefficients of polynomial to
*              representative in [-6283009,6283007].
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
inline fn __poly_reduce(reg ptr u32[N] a) -> reg ptr u32[N]
{
  reg u32 i coeff;

  i = 0;
  while(i < N)
  {
    coeff = a[(int) i];
    coeff = reduce32(coeff);
    a[(int) i] = coeff;

    i += 1;
  }

  return a;
}

/*************************************************
* Name:        PQCLEAN_DILITHIUM5_CLEAN_poly_caddq
*
* Description: For all coefficients of in/out polynomial add Q if
*              coefficient is negative.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
inline fn __poly_caddq(reg ptr u32[N] a) -> reg ptr u32[N]
{
  reg u32 i coeff;

  i = 0;
  while(i < N)
  {
    coeff = a[(int) i];
    coeff = caddq(coeff);
    a[(int) i] = coeff;

    i += 1;
  }

  return a;
}

/*************************************************
* Name:        PQCLEAN_DILITHIUM5_CLEAN_poly_add
*
* Description: Add polynomials. No modular reduction is performed.
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/

inline fn __poly_add_inplace(reg ptr u32[N] a b) -> reg ptr u32[N]
{
  reg u32 i coeff_a coeff_b;

  i = 0;
  while(i < N)
  {
    coeff_a = a[(int) i];
    coeff_b = b[(int) i];
    coeff_a = coeff_a + coeff_b;
    a[(int) i] = coeff_a;

    i += 1;
  }

  return a;
}

inline fn __poly_add(reg ptr u32[N] r a b) -> reg ptr u32[N]
{
  reg u32 i coeff_r coeff_a coeff_b;

  i = 0;
  while(i < N)
  {
    coeff_a = a[(int) i];
    coeff_b = b[(int) i];
    coeff_r = coeff_a + coeff_b;
    r[(int) i] = coeff_r;

    i += 1;
  }

  return r;
}

/*************************************************
* Name:        PQCLEAN_DILITHIUM5_CLEAN_poly_sub
*
* Description: Subtract polynomials. No modular reduction is
*              performed.
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
inline fn __poly_sub(reg ptr u32[N] r a b) -> reg ptr u32[N]
{
  reg u32 i coeff_r coeff_a coeff_b;

  i = 0;
  while(i < N)
  {
    coeff_a = a[(int) i];
    coeff_b = b[(int) i];
    coeff_r = coeff_a - coeff_b;
    r[(int) i] = coeff_r;

    i += 1;
  }

  return r;
}

/*************************************************
* Name:        PQCLEAN_DILITHIUM5_CLEAN_poly_shiftl
*
* Description: Multiply polynomial by 2^D without modular reduction. Assumes
*              input coefficients to be less than 2^{31-D} in absolute value.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/

inline fn __poly_shiftl(reg ptr u32[N] a) -> reg ptr u32[N]
{
  reg u32 i coeff_a;

  i = 0;
  while(i < N)
  {
    coeff_a = a[(int) i];
    coeff_a <<= D;
    a[(int) i] = coeff_a;

    i += 1;
  }

  return a;
}


