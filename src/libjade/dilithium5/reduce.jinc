require "params.jinc"

/*************************************************
* Name:        PQCLEAN_DILITHIUM5_CLEAN_montgomery_reduce
*
* Description: For finite field element a with -2^{31}Q <= a <= Q*2^31,
*              compute r \equiv a*2^{-32} (mod Q) such that -Q < r < Q.
*
* Arguments:   - int64_t: finite field element a
*
* Returns r.
**************************************************/

/* FIXME take minus_q as argument */

inline fn __montgomery_reduce_8380417(reg u32 a_low a_high) -> reg u32
{
  reg u32 a_low_x7 a_low_x7169 a_low_x58728449;
  reg u32 res;
  reg u32 q qinv minus_q;
  reg u32 t0 t1;
  minus_q = MINUS_Q;
  q = iQ;

  /// The following two attempts to construct a_low_x58728449 are equivalent
  // #1
  t0 = a_low << 3;
  a_low_x7 = t0 - a_low;
  t0 = a_low_x7 << 10;
  a_low_x7169 = a_low + t0;
  t0 = a_low_x7169 << 13;
  a_low_x58728449 = a_low + t0;

  // #2
  // qinv = 58728449;
  // a_low_x58728449 = #MUL(a_low, qinv);

  reg u32 txQ_high, txQ_low, tp_high, tp_low;
  txQ_low = #MUL(a_low_x58728449, q);
  txQ_high = #MULH(a_low_x58728449, q);

  tp_low = a_low - txQ_low;
  tp_high = a_high - txQ_high;
  if tp_low >32u a_low { tp_high = tp_high + 1; } // carry

  res = tp_high;
  return res;
}

fn _montgomery_reduce_8380417(reg u32 a_low a_high) -> reg u32
{
  reg u32 res;
  res = __montgomery_reduce_8380417(a_low, a_high);
  return res;
}

/*************************************************
* Name:        PQCLEAN_DILITHIUM5_CLEAN_reduce32
*
* Description: For finite field element a with a <= 2^{31} - 2^{22} - 1,
*              compute r \equiv a (mod Q) such that -6283009 <= r <= 6283007.
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
inline fn __reduce32_8380417(reg u32 a) -> reg u32
{
  reg u32 t t_x511 t_x523265 t_x4286586879 res;

  reg u32 shift;
  shift = (1 << 22); // 1<<22 == 4194304
  t = a + shift;
  t = t >>s 23; // we have that: t = (a + (1 << 22)) >> 23;
  t_x511 = __rsb_left_shift(t, t, 9, t_x511);

  shift = (t_x511 << 10);
  t_x523265 = t + shift;
  t_x4286586879 = __rsb_left_shift(t, t_x523265, 13, t_x4286586879);
  // we have that: t_x4286586879 == t * -Q 

  res = a + t_x4286586879;

  res = res;
  return res;
}

fn _reduce32_8380417(reg u32 a) -> reg u32
{
  reg u32 res;
  res = __reduce32_8380417(a);
  return res;
}

/*************************************************
* Name:        PQCLEAN_DILITHIUM5_CLEAN_caddq
*
* Description: Add Q if input coefficient is negative.
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/

/* FIXME this is stupid we recompute Q each time */
inline fn __caddq(reg u32 a) -> reg u32
{
  reg u32 q res;

  q = __Q();
  res = (a >>s 31);
  res = q & res;
  res += a;

  return res;
}

fn _caddq(reg u32 a) -> reg u32
{
  a = __caddq(a);
  return a;
}


/*************************************************
* Name:        PQCLEAN_DILITHIUM5_CLEAN_freeze
*
* Description: For finite field element a, compute standard
*              representative r = a mod^+ Q.
*
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
inline fn __freeze(reg u32 a) -> reg u32
{
  a = __reduce32_8380417(a);
  a = __caddq(a);
  return a;
}

fn _freeze(reg u32 a) -> reg u32
{
  a = __freeze(a);
  return a;
}
