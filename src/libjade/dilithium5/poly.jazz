require "poly.jinc"

export fn PQCLEAN_DILITHIUM5_CLEAN_poly_reduce_jazz(reg u32 pa) {
  stack u32[N] a;
  reg ptr u32[N] rpa; 
  a = __mem_to_poly(pa);
  rpa = a;
  a = __poly_reduce(rpa);
  __poly_to_mem(a, pa);
}

export fn PQCLEAN_DILITHIUM5_CLEAN_poly_caddq_jazz(reg u32 pa) {
  stack u32[N] a;
  reg ptr u32[N] rpa; 
  a = __mem_to_poly(pa);
  rpa = a;
  a = __poly_caddq(rpa);
  __poly_to_mem(a, pa);
}     

export fn PQCLEAN_DILITHIUM5_CLEAN_poly_add_jazz(reg u32 pc, reg u32 pa, reg u32 pb) {
  stack u32[N] a b c;
  reg ptr u32[N] rpa rpb rpc; 
  a = __mem_to_poly(pa);
  b = __mem_to_poly(pb);
  rpa = a; rpb = b; rpc = c;
  rpc = __poly_add(rpc, rpa, rpb);
  c = rpc;
  __poly_to_mem(c, pc);
}

export fn PQCLEAN_DILITHIUM5_CLEAN_poly_add_inplace_jazz(reg u32 pc, reg u32 pa, reg u32 pb) {
  stack u32[N] a b;
  reg ptr u32[N] rpa rpb; 
  a = __mem_to_poly(pa);
  b = __mem_to_poly(pb);
  rpa = a; rpb = b;
  a = __poly_add_inplace(rpa, rpb);
  __poly_to_mem(a, pc);
}

export fn PQCLEAN_DILITHIUM5_CLEAN_poly_chknorm(reg u32 pa, reg u32 B)  -> reg u32 {
  stack u32[N] a;
  reg ptr u32[N] rpa;
  a = __mem_to_poly(pa);
  rpa = a;

  reg u32 r;
  r = __poly_chknorm(rpa, B);

  return r;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyeta_pack_jazz(reg u32 pr, reg u32 pa) {
  stack u32[N] a;
  stack u8[POLYETA_PACKEDBYTES] r;
  reg ptr u32[N] rpa;
  reg ptr u8[POLYETA_PACKEDBYTES] rpr; 
  stack u32 spr;

  spr = pr;
  rpr = r;
  a = __mem_to_poly(pa);
  rpa = a;
  rpr = _polyeta_pack(rpr, rpa);
  pr = spr;
  __polyeta_to_mem(rpr, pr);
}  

export fn PQCLEAN_DILITHIUM5_CLEAN_polyeta_unpack_jazz(reg u32 pr, reg u32 pa) {
  reg ptr u32[N] rpr;
  reg ptr u8[POLYETA_PACKEDBYTES] rpa;
  stack u32[N] r;
  stack u8[POLYETA_PACKEDBYTES] a;

  rpr = r;
  a = __mem_to_polyeta(pa);
  rpa = a;
  rpr = _polyeta_unpack(rpr, rpa);
  __poly_to_mem(rpr, pr);
}

export fn PQCLEAN_DILITHIUM5_CLEAN_poly_ntt_jazz(reg u32 pa) {
  stack u32[N] a;
  reg ptr u32[N] rpa;
  a = __mem_to_poly(pa);
  rpa = a;
  a = _poly_ntt(rpa);
  __poly_to_mem(a, pa);
}

export fn PQCLEAN_DILITHIUM5_CLEAN_poly_invntt_tomont_jazz(reg u32 pa) {
  stack u32[N] a;
  reg ptr u32[N] rpa;
  a = __mem_to_poly(pa);
  rpa = a;
  a = _invntt_tomont(rpa);
  __poly_to_mem(a, pa);
}

export fn PQCLEAN_DILITHIUM5_CLEAN_poly_pointwise_montgomery_jazz(reg u32 pc, reg u32 pa, reg u32 pb) {
  stack u32[N] a b c;
  reg ptr u32[N] rpa rpb rpc;
  a = __mem_to_poly(pa);
  b = __mem_to_poly(pb);
  rpa = a; rpb = b; rpc = c;
  rpc = _poly_pointwise_montgomery(rpc, rpa, rpb);
  c = rpc;
  __poly_to_mem(c, pc);
}
  


