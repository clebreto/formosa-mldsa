require "polyvec.jinc"

export fn PQCLEAN_DILITHIUM5_CLEAN_polyvecl_uniform_eta_jazz(reg ptr u32[polyvecl] v,
  reg ptr u8[CRHBYTES] seed,
  reg u32 nonce
) -> reg ptr u32[polyvecl]
{
  v = v;
  v = _polyvecl_uniform_eta(v, seed, nonce);
  return v;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyvecl_uniform_gamma1_jazz(
  reg ptr u32[polyvecl] v,
  reg ptr u8[CRHBYTES] seed,
  reg u32 nonce
) -> reg ptr u32[polyvecl]
{
  v = v;
  v = _polyvecl_uniform_gamma1(v, seed, nonce);
  return v;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyvecl_reduce_jazz(reg ptr u32[polyvecl] v) -> reg ptr u32[polyvecl]
{
  v = v;
  v = _polyvecl_reduce(v);
  return v;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyvecl_add_jazz(
  reg ptr u32[polyvecl] w,
  reg ptr u32[polyvecl] u,
  reg ptr u32[polyvecl] v
) -> reg ptr u32[polyvecl]
{
  w = w; u = u; v = v;
  w = _polyvecl_add(w, u, v);
  return w;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyvecl_ntt_jazz(reg ptr u32[polyvecl] v) -> reg ptr u32[polyvecl] {
   v = v;
   v = _polyvecl_ntt(v);
   return v;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyvecl_invntt_tomont_jazz(reg ptr u32[polyvecl] v) -> reg ptr u32[polyvecl] {
  v = v;
  v = _polyvecl_invntt_tomont(v);
  return v;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyvecl_pointwise_poly_montgomery_jazz(
  reg ptr u32[polyvecl] r,
  reg ptr u32[N] a,
  reg ptr u32[polyvecl] v
) -> reg ptr u32[polyvecl] {
   r = r; a = a; v = v;    
   r = _polyvecl_pointwise_poly_montgomery(r, a, v);
   return r;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyvecl_pointwise_acc_montgomery_jazz(
  reg ptr u32[N] w,
  reg ptr u32[polyvecl] u,
  reg ptr u32[polyvecl] v
) -> reg ptr u32[N] {
  w = w; u = u; v = v;
  w = _polyvecl_pointwise_acc_montgomery(w, u, v);
  return w;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyvecl_chknorm_jazz(reg ptr u32[polyvecl] v, reg u32 bound) -> reg u32 {
  v = v; bound = bound;
  reg u32 r;
  r = _polyvecl_chknorm(v, bound);
  return r;
}

/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_uniform_eta_jazz(
  reg ptr u32[polyveck] v, 
  reg ptr u8[CRHBYTES] seed, 
  reg u32 nonce
) -> reg ptr u32[polyveck] {
  v = v; seed = seed; nonce = nonce;
  v = _polyveck_uniform_eta(v, seed, nonce);
  return v;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_reduce_jazz(reg ptr u32[polyveck] v) -> reg ptr u32[polyveck] {
  v = v;
  v = _polyveck_reduce(v);
  return v;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_caddq_jazz(reg ptr u32[polyveck] v) -> reg ptr u32[polyveck] {
  v = v;
  v = _polyveck_caddq(v);
  return v;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_add_jazz(
  reg ptr u32[polyveck] w,
  reg ptr u32[polyveck] u,
  reg ptr u32[polyveck] v
) -> reg ptr u32[polyveck] 
{
  w = w; u = u; v = v;
  w = _polyveck_add(w, u, v);
  return w;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_sub_jazz(
  reg ptr u32[polyveck] w,
  reg ptr u32[polyveck] u,
  reg ptr u32[polyveck] v
) -> reg ptr u32[polyveck]
{
  w = w; u = u; v = v;
  w = _polyveck_sub(w, u, v);
  return w;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_shiftl_jazz(reg ptr u32[polyveck] v) -> reg ptr u32[polyveck] {
  v = v;
  v = _polyveck_shiftl(v);
  return v;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_ntt_jazz(reg ptr u32[polyveck] v) -> reg ptr u32[polyveck] {
  v = v;
  v = _polyveck_ntt(v);
  return v;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_invntt_tomont_jazz(reg ptr u32[polyveck] v) -> reg ptr u32[polyveck] {
  v = v;
  v = _polyveck_invntt_tomont(v);
  return v;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_pointwise_poly_montgomery_jazz(
  reg ptr u32[polyveck] r,
  reg ptr u32[N] a,
  reg ptr u32[polyveck] v
) -> reg ptr u32[polyveck] {
  r = r; a = a; v = v;    
  r = _polyveck_pointwise_poly_montgomery(r, a, v);
  return r;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_chknorm_jazz(reg ptr u32[polyveck] v, reg u32 bound) -> reg u32 {
  v = v; bound = bound;
  reg u32 r;
  r = _polyveck_chknorm(v, bound);
  r = r;
  return r;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_power2round_jazz(
  reg ptr u32[polyveck] v1,
  reg ptr u32[polyveck] v0,
  reg ptr u32[polyveck] v
) -> reg ptr u32[polyveck], reg ptr u32[polyveck] {
  v1 = v1; v0 = v0; v = v;
  v1, v0 = _polyveck_power2round(v1, v0, v);
  return v1, v0;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_decompose_jazz(
  reg ptr u32[polyveck] v1,
  reg ptr u32[polyveck] v0,
  reg ptr u32[polyveck] v
) -> reg ptr u32[polyveck], reg ptr u32[polyveck] {
  v1 = v1; v0 = v0; v = v;
  v1, v0 = _polyveck_decompose(v1, v0, v);
  return v1, v0;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_make_hint_jazz(
  reg ptr u32[polyveck] h,
  reg ptr u32[polyveck] v0,
  reg ptr u32[polyveck] v1
) -> reg ptr u32[polyveck], reg u32
{
  h = h; v0 = v0; v1 = v1;
  reg u32 s;
  s, h = _polyveck_make_hint(h, v0, v1);
  return h, s;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_use_hint_jazz
(
  reg ptr u32[polyveck] w,
  reg ptr u32[polyveck] u,
  reg ptr u32[polyveck] h
) -> reg ptr u32[polyveck] {
  w = w; u = u; h = h;
  w = _polyveck_use_hint(w, u, h);
  return w;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyveck_pack_w1_jazz(
  reg ptr u8[K * POLYW1_PACKEDBYTES] r,
  reg ptr u32[polyveck] w1
) -> reg ptr u8[K * POLYW1_PACKEDBYTES] {
  r = r; w1 = w1;
  r = _polyveck_pack_w1(r, w1);
  return r;
}

export fn PQCLEAN_DILITHIUM5_CLEAN_polyvec_matrix_expand_jazz(
  reg ptr u32[matKL] mat,
  reg ptr u8[SEEDBYTES] rho
) -> reg ptr u32[matKL] {
  mat = _polyvec_matrix_expand(mat, rho);
  return mat;
}
