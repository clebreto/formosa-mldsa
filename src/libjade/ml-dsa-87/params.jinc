// Specific
param int K = 8;
param int L = 7;
param int ETA = 2;
param int TAU = 60;
param int BETA = 120;
param int OMEGA = 75;
param int CTILDEBYTES = 64;

param int POLYZ_PACKEDBYTES = 640; // N/2 * 5
param int POLYW1_PACKEDBYTES = 128; // N/2
param int POLYETA_PACKEDBYTES = 96; // N/8 * 3

param int POLYT1_PACKEDBYTES  = 320; // N/4 * 5
param int POLYT0_PACKEDBYTES = 416; // N/8 * 13

// Generic
param int N = 256;
param int SEEDBYTES = 32;
param int CRHBYTES = 64;
param int TRBYTES = 64;
param int RNDBYTES = 32;
param int D = 13;

param int iQ = 8380417;
u32 Q = iQ;
param int iGAMMA1 = (1 << 19);
u32 GAMMA1 = iGAMMA1;
param int iGAMMA2 = ((iQ-1)/32);
u32 GAMMA2 = iGAMMA2;
u32 MINUS_Q = -iQ; // this should be -Q
u32 MINUS_GAMMA2 = -iGAMMA2;

param int POLYVECH_PACKEDBYTES = (OMEGA + K);

param int PQC_SHAKECTX_BYTES = 25;
param int SHAKE256_RATE = 136;
param int SHAKE128_RATE = 168;

param int JASMIN_MLDSA87_CRYPTO_PUBLICKEYBYTES = (SEEDBYTES + K*POLYT1_PACKEDBYTES);
param int JASMIN_MLDSA87_CRYPTO_SECRETKEYBYTES = (2*SEEDBYTES + TRBYTES + L*POLYETA_PACKEDBYTES + K*POLYETA_PACKEDBYTES + K*POLYT0_PACKEDBYTES);
param int JASMIN_MLDSA87_CRYPTO_BYTES = (CTILDEBYTES + L*POLYZ_PACKEDBYTES + POLYVECH_PACKEDBYTES);


param int polyvecl = N * L;
param int polyveck = N * K;

inline fn __Q() -> reg u32 {
 // Q = 8380417 = 11 1111 1111 0000 0000 0000 1
  reg u32 q;
  q = 0x3FF;
  q <<= 13;
  q |= 1;
  return q;
}

inline fn __MINUS_Q() -> reg u32 {
 // -Q = -8380417 = 1 1111 1111 000 0000 000 1 1111 1111 1111
  reg u32 mq, q;
  q = __Q();
  mq = -q;
  return mq;
}

inline fn __GAMMA2 () -> reg u32 {
 // GAMMA2 = ((iQ-1)/32) = 11 1111 1111 0000 0000
 reg u32 gamma2;
 gamma2 = 0x3FF;
 gamma2 = gamma2 << 8;
 return gamma2;
}

inline fn __MINUS_GAMMA2 () -> reg u32 {
 reg u32 gamma2, mgamma2;
 gamma2	= __GAMMA2();
 mgamma2 = gamma2;
 return	mgamma2;
}

inline fn __GAMMA1 () -> reg u32 {
 // GAMMA1 = 1 << 19
 reg u32 gamma1;
 gamma1 = 1;
 gamma1 = gamma1 << 19;
 return gamma1;
}
