param int K = 8;
param int L = 7;
param int ETA = 2;
param int TAU = 60;
param int BETA = 120;
param int OMEGA = 75;
param int CTILDEBYTES = 64;

param int POLYZ_PACKEDBYTES = 640; // N/2 * 5
param int POLYW1_PACKEDBYTES = 128; // N/2
param int POLYETA_PACKEDBYTES = 96; // N/8 * 3

param int POLYT1_PACKEDBYTES  = 320; // N/4 * 5
param int POLYT0_PACKEDBYTES = 416; // N/8 * 13

param int iQ = 8380417;

param int iGAMMA1 = (1 << 19);
u32 GAMMA1 = iGAMMA1;
inline fn __GAMMA1 () -> reg u32 {
 // GAMMA1 = 1 << 19
 reg u32 gamma1;
 gamma1 = 1;
 gamma1 = gamma1 << 19;
 return gamma1;
}

param int iGAMMA2 = ((iQ-1)/32);
u32 GAMMA2 = iGAMMA2;

inline fn __GAMMA2 () -> reg u32 {
 // GAMMA2 = ((iQ-1)/32) = 11 1111 1111 0000 0000
 reg u32 gamma2;
 gamma2 = 0x3FF;
 gamma2 = gamma2 << 8;
 return gamma2;
}

inline fn __MINUS_GAMMA2 () -> reg u32 {
 reg u32 gamma2, mgamma2;
 gamma2	= __GAMMA2();
 mgamma2 = gamma2;
 return	mgamma2;
}
