require "fips202.jinc"
require "hashing.jinc"
require "row_vector.jinc"
require "column_vector.jinc"
require "parameters.jinc"
require "constants.jinc"
require "encoding/s1.jinc"
require "encoding/s2.jinc"
require "encoding/t0.jinc"
require "encoding/t1.jinc"
require "sample/matrix_A.jinc"
require "sample/error_vectors.jinc"

inline
fn keygen_internal(reg ptr u8[32] randomness)
    -> stack u8[VERIFICATION_KEY_SIZE], stack u8[SIGNING_KEY_SIZE]
{
    stack u8[VERIFICATION_KEY_SIZE] verification_key;
    stack u8[SIGNING_KEY_SIZE] signing_key;

    // PRF
    stack u64[25] state;
    stack u8[SHAKE256_RATE] randomness_expanded;

    // PRF outputs
    stack u8[32] seed_for_matrix_A;
    stack u8[64] seed_for_error_vectors;
    stack u8[32] seed_for_signing;

    // Matrices and vectors
    stack u32[ROWS_IN_MATRIX_A * COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] matrix_A;
    stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s1;
    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s2;

    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t t1 t0;

    state = shake256_absorb34(randomness, ROWS_IN_MATRIX_A, COLUMNS_IN_MATRIX_A);
    state, randomness_expanded = shake256_squeezeblock(state, randomness_expanded);

    seed_for_matrix_A = randomness_expanded[0:SEED_FOR_MATRIX_A_SIZE];
    seed_for_error_vectors = randomness_expanded[SEED_FOR_MATRIX_A_SIZE:SEED_FOR_ERROR_VECTORS_SIZE];
    seed_for_signing = randomness_expanded[SEED_FOR_MATRIX_A_SIZE + SEED_FOR_ERROR_VECTORS_SIZE:SEED_FOR_SIGNING_SIZE];

    s1, s2 = sample::error_vectors(seed_for_error_vectors);

    // Serialize most of the signing key here; in particular serialize 
    // s1 and s2 before applying the NTT to them.
    signing_key[0:SEED_FOR_MATRIX_A_SIZE] = #copy(seed_for_matrix_A);

    signing_key[SEED_FOR_MATRIX_A_SIZE:SEED_FOR_SIGNING_SIZE] = #copy(seed_for_signing);

    signing_key[START_OF_S1_IN_ENCODED_SIGNING_KEY : S1_ENCODED_SIZE] =
        s1::encode(s1, signing_key[START_OF_S1_IN_ENCODED_SIGNING_KEY: S1_ENCODED_SIZE]);

    signing_key[START_OF_S2_IN_ENCODED_SIGNING_KEY : S2_ENCODED_SIZE] =
        s2::encode(s2, signing_key[START_OF_S2_IN_ENCODED_SIGNING_KEY : S2_ENCODED_SIZE]);

    s1 = row_vector::ntt(s1);

    matrix_A = sample::matrix_A(seed_for_matrix_A);
    t = row_vector::multiply_with_matrix_A(matrix_A, s1);
    t = column_vector::reduce32(t);
    t = column_vector::invert_ntt_montgomery(t);

    t = column_vector::add(t, s2);

    t = column_vector::conditionally_add_modulus(t);
    t1, t0 = column_vector::power2round(t);

    // Serialize the verification key.
    verification_key[0:32] = #copy(seed_for_matrix_A);
    verification_key[32: T1_ENCODED_SIZE]
    = t1::encode(verification_key[32: T1_ENCODED_SIZE], t1);

    // ... and finish serializing the signing key.
    signing_key[64:64] = hash_verification_key(verification_key, signing_key[64:64]);

    signing_key[START_OF_T0_IN_ENCODED_SIGNING_KEY: T0_ENCODED_SIZE]
    = t0::encode(signing_key[START_OF_T0_IN_ENCODED_SIGNING_KEY: T0_ENCODED_SIZE], t0);

    return verification_key, signing_key;
}
