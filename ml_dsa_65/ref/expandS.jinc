require "constants.jinc"
require "fips202.jinc"

// N.B.: ETA is 4.

inline
fn sample_error_polynomial(stack u8[64] rho_prime, reg u16 elem_idx, reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] poly)
    -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
{
    reg u64 coeffs_generated;

    // SHA3 state
    stack u64[25] state;
    reg u64 offset;

    // temps
    reg u64 i;
    reg u8 c1;
    reg u32 v;
    
    reg u8 c;
    reg u32 c32;

    state = st0(state);

    ?{}, i = #set0_64();
    while(i < 64) {
        c1 = rho_prime[(int) i];
        state[u8 (int) i] = c1;
        i += 1;
    }
    c = (8u) elem_idx;
    state[u8 64] = c;
    state[u8 65] = 0;
    state[u8 66] = 0x1F;
    state[u8 SHAKE256_RATE - 1] = 0x80;

    state = __keccakf1600_ref(state);
    ?{}, coeffs_generated = #set0_64();
    ?{}, offset = #set0_64();
    while (coeffs_generated < COEFFICIENTS_IN_POLYNOMIAL) {
        if(offset >= SHAKE256_RATE) {
            state = __keccakf1600_ref(state);
            ?{}, offset = #set0_64();
        }

        c = state[u8 (int) offset];
        offset += 1;

        c32 = (32u) c;
        c32 &= 0x0F;
        if (c32 < 9) {
            v = 4;
            v -= c32;
            poly[(int) coeffs_generated] = v;
            coeffs_generated += 1;
        }

        if (coeffs_generated < COEFFICIENTS_IN_POLYNOMIAL) {
            c32 = (32u) c;
            c32 >>= 4;
            if(c32 < 9) {
                v = 4;
                v -= c32;
                poly[(int) coeffs_generated] = v;
                coeffs_generated += 1;
            }
        }
    }
    return poly;
}

inline
fn expandS(stack u8[64] rho_prime)
    -> stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL], stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
{
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] entry;
    stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s1;
    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s2;

    inline int i;

    for i = 0 to COLUMNS_IN_MATRIX_A {
        entry = s1[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];
        entry = sample_error_polynomial(rho_prime, i, entry);
        s1[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] = entry;
    }

    for i = 0 to ROWS_IN_MATRIX_A {
        entry = s2[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];
        entry = sample_error_polynomial(rho_prime, COLUMNS_IN_MATRIX_A + i, entry);
        s2[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] = entry;
    }

    return s1, s2;
}
