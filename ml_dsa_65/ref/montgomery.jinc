require "constants.jinc"

// MODULUS^{-1} mod MONTGOMERY_R
param int INVERSE_OF_MODULUS_MOD_MONTGOMERY_R = 58_728_449;

inline
fn montgomery_reduce(reg u64 a) -> reg u32
{
	reg u32 a32;
	reg u64 v64;
	reg u32 t;

	/* t = (int64_t)(int32_t)a*QINV; */
	a32 = (32s) a;
	v64 = (64s) a32;
	v64 *= INVERSE_OF_MODULUS_MOD_MONTGOMERY_R;
	t = (32s) v64;

	/* t = (a - (int64_t)t*Q) >> 32; */
	v64 = (64s) t;
	v64 *= -MODULUS;
	v64 += a;
	v64 >>= 32;
	t = (32s) v64;

	return t;
}

// Add Q if input coefficient is negative.
inline
fn caddq(reg u32 a) -> reg u32 {

	reg u32 a_add_q;

	a_add_q = a;
	a_add_q += MODULUS;

	a = a_add_q if(a <s 0);

	return a;
}

namespace coefficient {
    inline
    fn reduce32(reg u32 a) -> reg u32
    {
        reg u32 t v32;

        //t = (a + (1 << 22)) >> 23;
        t = a;
        t += (1 << 22);
        t = t >>s 23;

        //t = a - t*Q;
        v32 = t;
        v32 *= MODULUS;
        t = a;
        t -= v32;
        return t;
    }
}
