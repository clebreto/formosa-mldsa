require "fips202.jinc"
require "hashing.jinc"
require "constants.jinc"
require "parameters.jinc"
require "encoding/s1.jinc"
require "encoding/s2.jinc"
require "encoding/t0.jinc"
require "encoding/signature.jinc"
require "encoding/commitment.jinc"
require "row_vector.jinc"
require "sample/mask.jinc"
require "sample/matrix_A.jinc"
require "sample/challenge.jinc"

inline
fn derive_seed_for_mask(reg ptr u8[32] k, reg ptr u8[32] randomness, reg ptr u8[MESSAGE_REPRESENTATIVE_SIZE] message_representative)
    -> stack u8[MESSAGE_REPRESENTATIVE_SIZE]
{
    stack u8[64] seed_for_mask;
    reg u8 c;
    reg u64 i;
    stack u64[25] state;
    reg u64 loc;

    state = st0(state);
    ?{}, i = #set0_64();
    while(i < 32) {
        c = k[(int) i];
        state[u8 (int) i] = c;
        i += 1;
    }
    while(i < 64) {
        loc = i;
        loc -= 32;
        c = randomness[(int) loc];
        state[u8 (int) i] = c;  
        i += 1;
    }
    while(i < 128) {
        loc = i;
        loc -= MESSAGE_REPRESENTATIVE_SIZE;
        c = message_representative[(int) loc];
        state[u8 (int) i] = c;
        i += 1;
    }

    state[u8 128] ^= 0x1f;
    state[u8 SHAKE256_RATE - 1] ^= 0x80;

    state = __keccakf1600_ref(state);

    ?{}, i = #set0_64();
    while(i < 64) {
        c = state[u8 (int) i];
        seed_for_mask[(int) i] = c;
        i += 1;
    }
    return seed_for_mask;
}

inline
fn sign_internal(
        reg ptr u8[SIGNING_KEY_SIZE] signing_key,
        reg u64 pointer_to_message,
        reg u64 message_size,
        reg ptr u8[32] randomness
)
        -> stack u8[SIGNATURE_SIZE], reg u32
{
    stack u8[SIGNATURE_SIZE] signature_encoded;

    // parts of signing_key
    stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s1;
    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s2;
    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t0;

    stack u32[ROWS_IN_MATRIX_A * COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] matrix_A;
    stack u8[MESSAGE_REPRESENTATIVE_SIZE] message_representative;

    reg u16 domain_separator_for_mask;
    stack u8[64] seed_for_mask;

    stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] signer_response;
    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] hint;

    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] w0 w1;
    stack u8[ENCODED_COMMITMENT_SIZE] commitment_encoded;
    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] w0_minus_cs2;

    stack u8[COMMITMENT_HASH_SIZE] commitment_hash;

    stack u32[COEFFICIENTS_IN_POLYNOMIAL] verifier_challenge;

    stack u8 exit_rejection_sampling_loop;

    // Count and return signing attempts; this is useful for testing.
    stack u32 signing_attempts;

    stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] mask;
    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] w;
    stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] mask_as_ntt;
    stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] cs1;
    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] cs2;
    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] ct0;
    stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] w0_minus_cs2_plus_ct0;

    stack u32 ones_in_hint;
    stack u8 infinity_norm_check_result;

    s1 = s1::decode(signing_key[START_OF_S1_IN_ENCODED_SIGNING_KEY: S1_ENCODED_SIZE], s1);
    s2 = s2::decode(signing_key[START_OF_S2_IN_ENCODED_SIGNING_KEY: S2_ENCODED_SIZE], s2);
    t0 = t0::decode(t0, signing_key[START_OF_T0_IN_ENCODED_SIGNING_KEY: T0_ENCODED_SIZE]);

    () = #spill(randomness);
    message_representative = derive_message_representative(signing_key[64:MESSAGE_REPRESENTATIVE_SIZE], message_size, pointer_to_message);
    () = #unspill(randomness);

    seed_for_mask = derive_seed_for_mask(signing_key[32:32], randomness, message_representative);

    matrix_A = sample::matrix_A(signing_key[0:32]);

    s1 = row_vector::ntt(s1);
    s2 = column_vector::ntt(s2);
    t0 = column_vector::ntt(t0);

    domain_separator_for_mask = 0;

    exit_rejection_sampling_loop = 0;
    signing_attempts = 0;
    while (exit_rejection_sampling_loop != 1) {
        signing_attempts += 1;

        mask, domain_separator_for_mask = sample::mask(seed_for_mask, domain_separator_for_mask);

        mask_as_ntt = #copy(mask);
        mask_as_ntt = row_vector::ntt(mask_as_ntt);
        w = row_vector::multiply_with_matrix_A(matrix_A, mask_as_ntt);
        w = column_vector::reduce32(w);
        w = column_vector::invert_ntt_montgomery(w);

        w = column_vector::conditionally_add_modulus(w);
        w0, w1 = column_vector::decompose(w);

        commitment_encoded = commitment::encode(w1);

        commitment_hash = derive_commitment_hash(message_representative, commitment_encoded);

        verifier_challenge = sample::challenge(verifier_challenge, commitment_hash);
        verifier_challenge = polynomial::ntt(verifier_challenge);

        cs1 = row_vector::multiply_by_polynomial(s1, verifier_challenge);
        cs1 = row_vector::invert_ntt_montgomery(cs1);
        signer_response = row_vector::add(cs1, mask);
        signer_response = row_vector::reduce32(signer_response);
        infinity_norm_check_result = row_vector::check_infinity_norm(signer_response, (int) (GAMMA1 - BETA));

        if(infinity_norm_check_result == 0) {
            cs2 = column_vector::multiply_by_polynomial(s2, verifier_challenge);
            cs2 = column_vector::invert_ntt_montgomery(cs2);
            w0_minus_cs2 = column_vector::subtract(w0, cs2);
            w0_minus_cs2 = column_vector::reduce32(w0_minus_cs2);
            infinity_norm_check_result = column_vector::check_infinity_norm(w0_minus_cs2, (int) (GAMMA2 - BETA));

            if(infinity_norm_check_result == 0) {
                ct0 = column_vector::multiply_by_polynomial(t0, verifier_challenge);
                ct0 = column_vector::invert_ntt_montgomery(ct0);
                ct0 = column_vector::reduce32(ct0);
                infinity_norm_check_result = column_vector::check_infinity_norm(ct0, GAMMA2);

                if(infinity_norm_check_result == 0) {
                    w0_minus_cs2_plus_ct0 = column_vector::add(w0_minus_cs2, ct0);

                    ones_in_hint, hint = column_vector::make_hint(w0_minus_cs2_plus_ct0, w1);
                    if(ones_in_hint <= MAX_ONES_IN_HINT) {
                        exit_rejection_sampling_loop = 1;
                    }
                }
            }
        }
    }

    signature_encoded = signature::encode(commitment_hash, signer_response, hint);
    return signature_encoded, signing_attempts;
}
