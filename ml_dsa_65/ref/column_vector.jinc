require "polynomial.jinc"
require "arithmetic/rounding.jinc"
require "arithmetic/ntt.jinc"

// A column vector has dimensions ROWS_IN_MATRIX_A * 1
namespace column_vector {
    fn reduce32(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector)
        -> reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] {
        reg u64 i;
        reg u32 original reduced;

        i = 0;
        while(i < ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL) {
            original = vector[i];
            reduced = coefficient::reduce32(original);

            vector[i] = reduced;
            i += 1;
        }

        return vector;
    }

    fn ntt(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector)
        -> reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] {
        inline int i;
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] vector_element;

        for i = 0 to ROWS_IN_MATRIX_A {
            vector_element = vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];
            vector_element = polynomial::ntt(vector_element);
            vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] = vector_element;
        }

        return vector;
    }
    fn invert_ntt_montgomery(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector)
    -> reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int i;
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] entry;

        for i = 0 to ROWS_IN_MATRIX_A {
            entry = vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];
            entry = polynomial::invert_ntt_montgomery(entry);
            vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] = entry;
        }

        return vector;
    }

    inline
    fn power2round(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] v)
        -> stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL], stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t1 t0;
        reg u64 i;
        reg u32 x y1 y2;

        i = 0;
        while(i < ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL) {
            x = v[i];
            y1, y2 = coefficient::power2round(x);
            t1[i] = y1;
            t0[i] = y2;
            i += 1;
        }

        return t1, t0;
    }

    inline
    fn add(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] lhs rhs)
        -> stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] sum;
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] lhs_term rhs_term sum_term;

        inline int i;

        for i = 0 to ROWS_IN_MATRIX_A {
            lhs_term = lhs[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];
            rhs_term = rhs[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];

            sum_term = sum[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];
            sum_term = polynomial::add(lhs_term, rhs_term, sum_term);

            sum[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] = sum_term;
        }
        return sum;
    }

    inline
    fn conditionally_add_modulus(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector)
        -> reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        inline int i;
        for i = 0 to ROWS_IN_MATRIX_A {
            vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] =
                polynomial::conditionally_add_modulus(vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL]);
        }

        return vector;
    }

    inline
    fn decompose(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector)
    -> stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL],
       stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] low high;
        reg u32 coefficient low_bits high_bits;
        reg u64 i;

        i = 0;
        while(i < ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL) {
            coefficient = vector[i];

            low_bits, high_bits = coefficient::decompose(coefficient);

            low[i] = low_bits;
            high[i] = high_bits;

            i += 1;
        }

        return low, high;
    }

    inline
    fn multiply_by_polynomial(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector, reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] f)
        -> stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] fvector;

        inline int ii;
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] fg g;

        for ii = 0 to ROWS_IN_MATRIX_A {
            fg = fvector[ii * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];
            g = vector[ii * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];
            fg = polynomial::pointwise_montgomery_product(f, g, fg);
            fvector[ii * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] = fg;
        }

        return fvector;
    }

    inline
    fn subtract(stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] lhs rhs)
        -> stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] difference;
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] lhs_term rhs_term difference_term;

        inline int i;

        for i = 0 to ROWS_IN_MATRIX_A {
            lhs_term = lhs[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];
            rhs_term = rhs[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];

            difference_term = difference[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];
            difference_term = polynomial::subtract(lhs_term, rhs_term, difference_term);

            difference[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] = difference_term;
        }

        return difference;
    }

    inline
    fn check_infinity_norm(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] vector,
                           inline int threshold
    ) -> reg u8
    {
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] vector_element;

        reg u8 ret;
        reg u8 result;

        inline int i;

        result = 0;
        for i = 0 to ROWS_IN_MATRIX_A {
            vector_element = vector[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];
            ret = polynomial::check_infinity_norm(vector_element, threshold);
            result |= ret;
        }

        return result;
    }

    inline
    fn make_hint(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] v0 lhs)
        -> stack u32, stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32 total_weight weight_comp;
        reg u32 reg_weight_comp reg_total_weight;
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] hints;

        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] hints_comp v0_comp lhs_comp;

        inline int i;

        total_weight = 0;
        for i = 0 to ROWS_IN_MATRIX_A {
            v0_comp = v0[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];
            lhs_comp = lhs[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];
            hints_comp = hints[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];

            weight_comp, hints_comp = polynomial::make_hint(v0_comp, lhs_comp, hints_comp);

            reg_weight_comp = weight_comp;
            reg_total_weight = total_weight;
            reg_total_weight += reg_weight_comp;
            total_weight = reg_total_weight;

            hints[i * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] = hints_comp;
        }

        return total_weight, hints;
    }

}
