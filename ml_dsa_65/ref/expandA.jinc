require "fips202.jinc"

inline
fn uniform_sample_polynomial(reg ptr u8[32] rho, inline int i, inline int j,
	reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] result) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
{
    stack u32 polynomial_offset;
    stack u8[3] vs;
    reg u32 value v;
    reg u64 xof_offset;
    stack u64[25] state;
    reg ptr u64[25] state_rsp;
    inline int k;
    reg u8 c;
    reg u64 addr;

    stack u8[34] seed;
    reg ptr u8[34] seed_rsp;
    for k = 0 to 32 {
        c = rho[k];
        seed[k] = c;
    }
    seed[32] = j;
    seed[33] = i;

    state_rsp = state;
    seed_rsp = seed;
    state_rsp = shake128_absorb34(state_rsp, seed_rsp);
    state_rsp = __keccakf1600_ref(state_rsp);

    xof_offset = 0;
    polynomial_offset = 0;
    while(polynomial_offset < COEFFICIENTS_IN_POLYNOMIAL) {
        for k = 0 to 3 {
            if(xof_offset >= SHAKE128_RATE) {
                state_rsp = __keccakf1600_ref(state_rsp);
                xof_offset = 0;
            }
            c = state_rsp[u8 (int) xof_offset];
            vs[k] = c;
            xof_offset += 1;
        }

        //remove highest bit
        c = vs[2];
        c &= 127;
        vs[2] = c;

        //assemble value in little endian
        value = (32u) vs[2];
        for k = 1 to 3 {
            value <<= 8;
            v = (32u) vs[2 - k];
            value += v;
        }

        if(value < MODULUS) {
            addr = (64u) polynomial_offset;
            result[(int) addr] = value;
            polynomial_offset += 1;
        }
}

return result;
}

inline
fn expandA(stack u8[32] rho) -> stack u32[ROWS_IN_MATRIX_A * COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL]
{
    reg ptr u8[32] rho_rsp;
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] poly;
    stack u32[ROWS_IN_MATRIX_A * COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] matrix;

    inline int i j;

    for i = 0 to ROWS_IN_MATRIX_A {
        for j = 0 to COLUMNS_IN_MATRIX_A {
            rho_rsp = rho;
            poly = matrix[(i * COLUMNS_IN_MATRIX_A + j) * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL];
            poly = uniform_sample_polynomial(rho_rsp, i, j, poly);
            matrix[(i * COLUMNS_IN_MATRIX_A + j) * COEFFICIENTS_IN_POLYNOMIAL : COEFFICIENTS_IN_POLYNOMIAL] = poly;
        }
    }

    return matrix;
}
