require "../fips202.jinc"
require "../parameters.jinc"
require "../encoding/gamma1.jinc"

inline
fn absorb_for_shake256(
    stack u64[25] state,
    reg ptr u8[64] rho_prime,
    stack u16 domain_separator
) -> stack u64[25] {
    reg u8 byte;
    reg u16 v;

    reg u64 i;

    state = st0(state);

    i = 0;
    while(i < 64) {
        byte = rho_prime[i];
        state[u8 i] = byte;
        i += 1;
    }

    v = domain_separator;
    v &= 0xFF;
    byte = (8u)v;
    state[u8 64] = byte;

    v = domain_separator;
    v >>= 8;
    byte = (8u)v;
    state[u8 65] = byte;

    state[u8 66] ^= 0x1f;
    state[u8 SHAKE256_RATE - 1] ^= 0x80;

    return state;
}

// We calculate ceil(a/b) = floor((a + b - 1) / b) where:
// a = ENCODED_GAMMA1_POLYNOMIAL_SIZE
// b = SHAKE256_RATE
param int SHAKE256_BLOCKS_FOR_GAMMA1_ENCODED_POLYNOMIAL =
    (ENCODED_GAMMA1_POLYNOMIAL_SIZE + SHAKE256_RATE - 1) / SHAKE256_RATE;

inline
fn sample_mask_polynomial(
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] mask,
    reg ptr u8[64] rho_prime,
    stack u16 domain_separator
) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] {
    reg u64 i mask_encoded_offset;
    reg u8 byte;
    stack u64[25] state;
    stack u8[SHAKE256_BLOCKS_FOR_GAMMA1_ENCODED_POLYNOMIAL * SHAKE256_RATE] mask_encoded;
    stack u64 block_being_squeezed;

    state = absorb_for_shake256(state, rho_prime, domain_separator);

    mask_encoded_offset = 0;
    block_being_squeezed = 0;
    while(block_being_squeezed < SHAKE256_BLOCKS_FOR_GAMMA1_ENCODED_POLYNOMIAL) {
        state = __keccakf1600_ref(state);

        i = 0;
        while(i < SHAKE256_RATE) {
            byte = state[u8 i];
            i += 1;

            mask_encoded[mask_encoded_offset] = byte;
            mask_encoded_offset += 1;
        }

        block_being_squeezed += 1;
    }

    mask = gamma1::decode_to_polynomial(mask, mask_encoded[0 : ENCODED_GAMMA1_POLYNOMIAL_SIZE]);

    return mask;
}

namespace sample {
    inline
    fn mask(reg ptr u8[64] rho_prime, reg u16 domain_separator)
        -> stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL], reg u16
    {
        stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] mask;
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] mask_polynomial;

        inline int i;

        for i = 0 to COLUMNS_IN_MATRIX_A {
            mask_polynomial = mask[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];

            mask_polynomial = sample_mask_polynomial(mask_polynomial, rho_prime, domain_separator);
            domain_separator += 1;

            mask[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] = mask_polynomial;
        }
        return mask, domain_separator;
    }
}
