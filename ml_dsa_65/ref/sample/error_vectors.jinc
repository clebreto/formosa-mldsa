require "../constants.jinc"
require "../fips202.jinc"

// N.B.: ETA is 4.

inline
fn absorb_rho_prime_for_shake256(
    reg ptr u64[25] state,
    reg ptr u8[64] rho_prime,
    reg u16 index
) -> stack u64[25] {
    reg u8 byte;
    reg u16 temp;

    reg u64 i;

    state = st0(state);

    i = 0;
    while(i < 64) {
        byte = rho_prime[i];
        state[u8 i] = byte;
        i += 1;
    }

    state[u8 64] = (8u)index;

    // TODO: Write a test that would fail if this were set to 0.
    temp = index;
    temp >>= 8;
    state[u8 65] = (8u)temp;

    state[u8 66] = 0x1f;
    state[u8 SHAKE256_RATE - 1] = 0x80;

    return state;
}

inline
fn sample_error_polynomial(
    reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] error,
    reg ptr u8[64] rho_prime,
    reg u16 index
) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
{
    reg u64 coefficients_sampled;

    reg u64 xof_offset;
    stack u64[25] state;

    reg u8 byte;
    reg u32 try_coefficient temp;

    state = absorb_rho_prime_for_shake256(state, rho_prime, index);
    state = __keccakf1600_ref(state);

    coefficients_sampled = 0;
    xof_offset = 0;
    while (coefficients_sampled < COEFFICIENTS_IN_POLYNOMIAL) {
        if(xof_offset >= SHAKE256_RATE) {
            state = __keccakf1600_ref(state);
            xof_offset = 0;
        }

        byte = state[u8 xof_offset];
        xof_offset += 1;

        try_coefficient = (32u)byte;
        try_coefficient &= 0x0F;
        if (try_coefficient < 9) {
            temp = 4;
            temp -= try_coefficient;
            error[coefficients_sampled] = temp;

            coefficients_sampled += 1;
        }

        if (coefficients_sampled < COEFFICIENTS_IN_POLYNOMIAL) {
            try_coefficient = (32u)byte;
            try_coefficient >>= 4;
            if(try_coefficient < 9) {
                temp = 4;
                temp -= try_coefficient;
                error[coefficients_sampled] = temp;

                coefficients_sampled += 1;
            }
        }
    }

    return error;
}

namespace sample {
    inline
    fn error_vectors(stack u8[64] rho_prime)
        -> stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL],
           stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] {
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] entry;
        stack u32[COLUMNS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s1;
        stack u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] s2;

        inline int i;

        for i = 0 to COLUMNS_IN_MATRIX_A {
            entry = s1[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];
            entry = sample_error_polynomial(entry, rho_prime, i);
            s1[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] = entry;
        }

        for i = 0 to ROWS_IN_MATRIX_A {
            entry = s2[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL];
            entry = sample_error_polynomial(entry, rho_prime, COLUMNS_IN_MATRIX_A + i);
            s2[COEFFICIENTS_IN_POLYNOMIAL * i : COEFFICIENTS_IN_POLYNOMIAL] = entry;
        }

        return s1, s2;
    }
}
