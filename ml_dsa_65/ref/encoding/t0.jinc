require "../parameters.jinc"

namespace t0 {
    fn encode_polynomial(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t0, reg ptr u8[T0_POLYNOMIAL_ENCODED_SIZE] dest)
        -> reg ptr u8[T0_POLYNOMIAL_ENCODED_SIZE]
    {
        // TODO: This function needs some superficial optimization

        inline int max_t0;
        max_t0 = (1 << BITS_IN_LOWER_PART_OF_T) / 2;

        stack u32 t0_term;
        stack u32[8] t;

        reg u64 i j;
        reg u64 addr;

        reg u32 v32;

        reg u8 c c1;

        ?{}, i = #set0_64();
        while(i < COEFFICIENTS_IN_POLYNOMIAL / 8) {
            ?{}, j = #set0_64();
            while (j < 8) {
                addr = #LEA_64(8*i + j);
                v32 = t0[(int) addr];
                t0_term = v32;
                v32 = max_t0;
                v32 -= t0_term;
                t[(int) j] = v32;
                j += 1;
            }

            // Get ready.
            // Here be typos.
            // TODO: Check if there are indeed no typos

            //r[13*i+ 0]  =  t[0];

            v32 = t[0];
            c = (8u) v32;
            addr = i;
            addr *= 13;
            dest[(int) addr] = c;

            //r[13*i+ 1]  =  t[0] >>  8;
            //r[13*i+ 1] |=  t[1] <<  5;

            v32 = t[0];
            v32 >>= 8;
            c = (8u) v32;
            v32 = t[1];
            v32 <<= 5;
            c1 = (8u) v32;
            c |= c1;
            addr = i;
            addr *= 13;
            addr += 1;
            dest[(int) addr] = c;

            //r[13*i+ 2]  =  t[1] >>  3;

            v32 = t[1];
            v32 >>= 3;
            c = (8u) v32;
            addr = i;
            addr *= 13;
            addr += 2;
            dest[(int) addr] = c;

            //r[13*i+ 3]  =  t[1] >> 11;
            //r[13*i+ 3] |=  t[2] <<  2;

            v32 = t[1];
            v32 >>= 11;
            c = (8u) v32;
            v32 = t[2];
            v32 <<= 2;
            c1 = (8u) v32;
            c |= c1;
            addr = i;
            addr *= 13;
            addr += 3;
            dest[(int) addr] = c;

            //r[13*i+ 4]  =  t[2] >>  6;
            //r[13*i+ 4] |=  t[3] <<  7;

            v32 = t[2];
            v32 >>= 6;
            c = (8u) v32;
            v32 = t[3];
            v32 <<= 7;
            c1 = (8u) v32;
            c |= c1;
            addr = i;
            addr *= 13;
            addr += 4;
            dest[(int) addr] = c;

            //r[13*i+ 5]  =  t[3] >>  1;

            v32 = t[3];
            v32 >>= 1;
            c = (8u) v32;
            addr = i;
            addr *= 13;
            addr += 5;
            dest[(int) addr] = c;

            //r[13*i+ 6]  =  t[3] >>  9;
            //r[13*i+ 6] |=  t[4] <<  4;

            v32 = t[3];
            v32 >>= 9;
            c = (8u) v32;
            v32 = t[4];
            v32 <<= 4;
            c1 = (8u) v32;
            c |= c1;
            addr = i;
            addr *= 13;
            addr += 6;
            dest[(int) addr] = c;

            //r[13*i+ 7]  =  t[4] >>  4;

            v32 = t[4];
            v32 >>= 4;
            c = (8u) v32;
            addr = i;
            addr *= 13;
            addr += 7;
            dest[(int) addr] = c;

            //r[13*i+ 8]  =  t[4] >> 12;
            //r[13*i+ 8] |=  t[5] <<  1;

            v32 = t[4];
            v32 >>= 12;
            c = (8u) v32;
            v32 = t[5];
            v32 <<= 1;
            c1 = (8u) v32;
            c |= c1;
            addr = i;
            addr *= 13;
            addr += 8;
            dest[(int) addr] = c;

            //r[13*i+ 9]  =  t[5] >>  7;
            //r[13*i+ 9] |=  t[6] <<  6;

            v32 = t[5];
            v32 >>= 7;
            c = (8u) v32;
            v32 = t[6];
            v32 <<= 6;
            c1 = (8u) v32;
            c |= c1;
            addr = i;
            addr *= 13;
            addr += 9;
            dest[(int) addr] = c;

            //r[13*i+10]  =  t[6] >>  2;

            v32 = t[6];
            v32 >>= 2;
            c = (8u) v32;
            addr = i;
            addr *= 13;
            addr += 10;
            dest[(int) addr] = c;

            //r[13*i+11]  =  t[6] >> 10;
            //r[13*i+11] |=  t[7] <<  3;

            v32 = t[6];
            v32 >>= 10;
            c = (8u) v32;
            v32 = t[7];
            v32 <<= 3;
            c1 = (8u) v32;
            c |= c1;
            addr = i;
            addr *= 13;
            addr += 11;
            dest[(int) addr] = c;

            //r[13*i+12]  =  t[7] >>  5;

            v32 = t[7];
            v32 >>= 5;
            c = (8u) v32;
            addr = i;
            addr *= 13;
            addr += 12;
            dest[(int) addr] = c;

            i += 1;
        }


        return dest;
    }

    inline fn
    encode(reg ptr u8[T0_ENCODED_SIZE] encoded, reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t0) -> reg ptr u8[T0_ENCODED_SIZE] {
        reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t0_to_pack;

        inline int j;

        for j = 0 to ROWS_IN_MATRIX_A {
            t0_to_pack = t0[COEFFICIENTS_IN_POLYNOMIAL * j : COEFFICIENTS_IN_POLYNOMIAL];
            encoded[j * T0_POLYNOMIAL_ENCODED_SIZE : T0_POLYNOMIAL_ENCODED_SIZE] = encode_polynomial(t0_to_pack, encoded[j * T0_POLYNOMIAL_ENCODED_SIZE : T0_POLYNOMIAL_ENCODED_SIZE]);
        }

        return encoded;
    }

    fn decode_polynomial(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] t0, reg ptr u8[T0_POLYNOMIAL_ENCODED_SIZE] src)
    -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] {
    // TODO: This function needs some superficial optimization

    inline int max_t0;
    max_t0 = (1 << BITS_IN_LOWER_PART_OF_T) / 2;

    reg u64 i;
    reg u64 addr;
    reg u32 x;
    reg u32 v;
    reg u64 term;

    ?{}, i = #set0_64();
    while(i < COEFFICIENTS_IN_POLYNOMIAL / 8) {
            // r->coeffs[8*i+0] = a[13*i+0];
            addr = (64u) i;
            addr *= 13;
            x = (32u) src[(int) addr];

            // r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 8;
            x |= v;

            // r->coeffs[8*i+0] &= 0x1FFF;
            x &= 0x1FFF;

            // r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
            x = -x;
            x += max_t0;
            term = (64u) i;
            term *= 8;
            t0[(int) term] = x;

            // r->coeffs[8*i+1]  = a[13*i+1] >> 5;
            x = (32u) src[(int) addr];
            x >>= 5;

            // r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 3;
            x |= v;

            // r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 11;
            x |= v;

            // r->coeffs[8*i+1] &= 0x1FFF;
            x &= 0x1FFF;

            // r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
            x = -x;
            x += max_t0;
            term += 1;
            t0[(int) term] = x;

            // r->coeffs[8*i+2]  = a[13*i+3] >> 2;
            x = (32u) src[(int) addr];
            x >>= 2;

            // r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 6;
            x |= v;

            // r->coeffs[8*i+2] &= 0x1FFF;
            x &= 0x1FFF;

            // r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
            x = -x;
            x += max_t0;
            term += 1;
            t0[(int) term] = x;

            // r->coeffs[8*i+3]  = a[13*i+4] >> 7;
            x = (32u) src[(int) addr];
            x >>= 7;

            // r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 1;
            x |= v;

            // r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 9;
            x |= v;

            // r->coeffs[8*i+3] &= 0x1FFF;
            x &= 0x1FFF;

            // r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
            x = -x;
            x += max_t0;
            term += 1;
            t0[(int) term] = x;

            // r->coeffs[8*i+4]  = a[13*i+6] >> 4;
            x = (32u) src[(int) addr];
            x >>= 4;

            // r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 4;
            x |= v;

            // r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 12;
            x |= v;

            // r->coeffs[8*i+4] &= 0x1FFF;
            x &= 0x1FFF;

            // r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
            x = -x;
            x += max_t0;
            term += 1;
            t0[(int) term] = x;

            // r->coeffs[8*i+5]  = a[13*i+8] >> 1;
            x = (32u) src[(int) addr];
            x >>= 1;

            // r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 7;
            x |= v;

            // r->coeffs[8*i+5] &= 0x1FFF;
            x &= 0x1FFF;

            // r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
            x = -x;
            x += max_t0;
            term += 1;
            t0[(int) term] = x;

            // r->coeffs[8*i+6]  = a[13*i+9] >> 6;
            x = (32u) src[(int) addr];
            x >>= 6;

            // r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 2;
            x |= v;

            // r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 10;
            x |= v;

            // r->coeffs[8*i+6] &= 0x1FFF;
            x &= 0x1FFF;

            // r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
            x = -x;
            x += max_t0;
            term += 1;
            t0[(int) term] = x;

            // r->coeffs[8*i+7]  = a[13*i+11] >> 3;
            x = (32u) src[(int) addr];
            x >>= 3;

            // r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
            addr += 1;
            v = (32u) src[(int) addr];
            v <<= 5;
            x |= v;

            // r->coeffs[8*i+7] &= 0x1FFF;
            x &= 0x1FFF;

            // r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
            x = -x;
            x += max_t0;
            term += 1;
            t0[(int) term] = x;

            i += 1;
        }

        return t0;
    }

    inline fn
    decode(reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] t0, reg ptr u8[T0_ENCODED_SIZE] encoded) -> reg ptr u32[ROWS_IN_MATRIX_A * COEFFICIENTS_IN_POLYNOMIAL] {
        reg ptr u8[T0_POLYNOMIAL_ENCODED_SIZE] encoded_polynomial;

        inline int i;
        for i = 0 to ROWS_IN_MATRIX_A {
            encoded_polynomial = encoded[T0_POLYNOMIAL_ENCODED_SIZE * i : T0_POLYNOMIAL_ENCODED_SIZE];
            t0[i * COEFFICIENTS_IN_POLYNOMIAL: COEFFICIENTS_IN_POLYNOMIAL] = decode_polynomial(t0[i * COEFFICIENTS_IN_POLYNOMIAL: COEFFICIENTS_IN_POLYNOMIAL], encoded_polynomial);
        }

        return t0;
    }
}
