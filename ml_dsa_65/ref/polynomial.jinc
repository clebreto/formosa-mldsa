require "parameters.jinc"
require "arithmetic/modular.jinc"

namespace polynomial {
    fn add(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] f g sum)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] {
        reg u32 result v32;

        reg u64 i;
        ?{}, i = #set0_64();
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            result = f[(int) i];
            v32 = g[(int) i];
            result += v32;
            sum[(int) i] = result;
            i += 1;
        }
        return sum;
    }

    fn subtract(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] f g difference)
    -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] {
        reg u32 result v32;

        reg u64 i;
        ?{}, i = #set0_64();
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            result = f[(int) i];
            v32 = g[(int) i];
            result -= v32;
            difference[(int) i] = result;
            i += 1;
        }
        return difference;
    }

    fn sum_coefficients(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] f sum)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u32 v32 result;

        reg u64 i;
        ?{}, i = #set0_64();
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            v32 = f[(int) i];
            result = sum[(int) i];
            result += v32;
            sum[(int) i] = result;
            i += 1;
        }
        return sum;
    }

    fn pointwise_montgomery_product(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] fft_f fft_g fft_prod)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 i;
        reg u32 x1 x2;
        reg u64 prod x2_64;
        reg u32 prod_redc;

        ?{}, i = #set0_64();
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            x1 = fft_f[(int) i];
            prod = (64s) x1;
            x2 = fft_g[(int) i];
            x2_64 = (64s) x2;
            prod *= x2_64;

            prod_redc = montgomery_reduce(prod);
            fft_prod[(int) i] = prod_redc;
            i += 1;
        }
        return fft_prod;
    }

    fn zero(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] f)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 i;
        ?{}, i = #set0_64();
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            // Montgomery of 0 is 0
            f[(int) i] = 0;
            i += 1;
        }
        return f;
    }

    fn conditionally_add_modulus(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] f)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 i;
        reg u32 val;
        ?{}, i = #set0_64();
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            val = f[(int) i];
            val = coefficient::conditionally_add_modulus(val);
            f[(int) i] = val;
            i += 1;
        }
        return f;
    }

    inline
    fn check_infinity_norm(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] f, inline int threshold)
        -> stack u8
    {
        stack u8 r;
        reg u8 result;
        stack u8 result_s;
        reg u8 c;
        reg u64 i;
        reg u32 coefficient;

        result = 0;

        ?{}, i = #set0_64();
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            coefficient = f[(int) i];
            r = coefficient::check_norm(coefficient, threshold);
            c = r;
            result |= c;
            i += 1;
        }

        result_s = result;
        return result_s;
    }

    inline
    fn make_hint(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] f0 f1 hints)
        -> stack u32, reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        stack u32 weight;
        reg u64 i;
        reg u32 a0 a1;
        reg u32 h;

        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            hints[(int) i] = 0;
            i += 1;
        }

        weight = 0;
        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            a0 = f0[(int) i];
            a1 = f1[(int) i];
            h = coefficient::make_hint(a0, a1);
            hints[(int) i] = h;
            weight += h;
            i += 1;
        }

        return weight, hints;
    }

    fn reduce32(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial)
        -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 i;
        reg u32 coeff reduced;

        i = 0;
        while(i < COEFFICIENTS_IN_POLYNOMIAL) {
            coeff = polynomial[i];
            reduced = coefficient::reduce32(coeff);
            polynomial[(int) i] = reduced;

            i += 1;
        }

        return polynomial;
    }

    inline
    fn shift_coefficients_left(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] polynomial) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] {
        reg u64 i;
        reg u32 coefficient;

        i = 0;
        while (i < COEFFICIENTS_IN_POLYNOMIAL) {
            coefficient = polynomial[i];
            coefficient <<= BITS_IN_LOWER_PART_OF_T;
            polynomial[i] = coefficient;
            i += 1;
        }

        return polynomial;
    }

    fn use_hints(reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL] commitment hints) -> reg ptr u32[COEFFICIENTS_IN_POLYNOMIAL]
    {
        reg u64 i;
        reg u32 a h;

        i = 0;
        while (i < COEFFICIENTS_IN_POLYNOMIAL) {
            h = hints[i];
            a = commitment[i];
            a = coefficient::use_hint(a, h);
            commitment[i] = a;

            i += 1;
        }
        return commitment;
    }
}
